#!/usr/bin/env php
<?php

/*
Brayan Iribe (IvySoftware). Copyright 2019.
First revision: 26-07-2019.
 */

define("version", "1.0.2");

require_once __DIR__ . "/src/utils.php";

$builder = new Builder();

class Builder
{

    private $host, $user, $passwd;

    public function __construct()
    {
        global $argv;
        global $argc;

        //check if phalcon module is available

        $benchmark_start = microtime(true);
        $u_table = "";
        $keep_suffix = Utils::parse_argv("--keep-suffix", $argv);
        $db_params = Utils::parse_argv("--db", $argv);
        $namespace = Utils::parse_argv("--namespace", $argv);

        if (count($argv) > 1 && $argv[1] && strpos($argv[1], '-') === false && strpos($argv[1], '=') === false) {
            $u_table = $argv[1];
        }

        if (!count($namespace)) {
            $namespace = "";
        } else {
            $namespace = $namespace[0];
        }

        $db = $db_params;

        Utils::splash();

        if (in_array("--help", $argv)) {
            Utils::help();
            return;
        }

        $project_type = Utils::find_project();
        $project_str = "???";

        if ($project_type === false) {
            Utils::log("No compatible project found!", false);
        } else if ($project_type == Utils::PHALCON_PROJECT) {
            $project_str = "Phalcon";
        }

        Utils::log("{$project_str} project found.", "WARN");
        if (!extension_loaded("phalcon")) {
            Utils::log("Phalcon module is not installed/enabled in the current php instance.", false);
        }

        //get phalcon config

        $config_dir = getcwd() . "/app/config/config.php";

        if (!file_exists($config_dir)) {
            Utils::log("config.php not found in project!", false);
            return;
        }

        $config = require_once $config_dir;

        $host = $config->database->host;
        $user = $config->database->username;
        $passwd = $config->database->password;

        if (isset($config->database->dbname) && !count($db_params)) {
            $db[] = $config->database->dbname;
        }

        if (isset($config->database->app_dbname) && !count($db_params)) {
            $db[] = $config->database->app_dbname;
        }

        //check if phalcon devtools is available
        $cmd = Utils::shell("phalcon --version");
        $error = $cmd === null || !strlen($cmd) || strpos($cmd, "Phalcon DevTools") === false;
        Utils::log("Phalcon devtools " . ($error ? "not " : "") . "found.", !$error);

        //check schemas

        $this->host = $host;
        $this->user = $user;
        $this->passwd = $passwd;
        $this->conn = Utils::open_conn($host, $user, $passwd);

        //now retrieve the tables of main db

        if (count($db_params)) {
            Utils::log("Overriding databases in config.php! --db argument present!", "WARN");
        }

        if (!file_exists(getcwd() . "/app/models")) {
            Utils::log("Models folder doesnt exists, I'll create one...", "WARN");
            @mkdir(getcwd() . "/app/models");
        }

        //so start with phalcon models

        foreach ($db as $dbname) {
            $tables = Utils::query($this->conn, "SHOW TABLES IN " . $dbname);
            Utils::log("#######################################################", "NO_BRACKET");
            Utils::log("Switching to database " . $dbname, "bold");
            Utils::log("Database have" . ($tables == false ? "'nt" : "") . " tables.", ($tables !== false));
            $models = [];
            $avoided_suffixes = [];
            $is_app = false;
            if (isset($config->database->app_dbname) && $config->database->app_dbname == $dbname) {
                $is_app = true;
            }
            $fixer = [];
            foreach ($tables as $table) {
                $suf = "";
                $name = Utils::get_tablename($table, $keep_suffix, $avoided_suffixes, $suf);
                if (strlen($suf)) {
                    $fixer[$suf . $name] = $name;
                }
            }
            //check if the table provided is in dbms
            $avoided_suffixes_n = [];
            if ($u_table && strlen($u_table)) {
                if (in_array($u_table, $tables)) {
                    $tables = [$u_table];
                    $name = Utils::get_tablename($u_table, $keep_suffix, $avoided_suffixes_n);
                    $model = getcwd() . "/app/models/" . $name . ".php";
                    if (!file_exists($model)) {
                        Utils::log("The model " . $name . ".php doesn't exists.", false);
                    }
                    //get the namespace of model
                    $file = file($model);
                    $ns_ln = Utils::strpos_line($file, "namespace") - 1;
                    $ns_ln = $file[$ns_ln];
                    $ns_pos = strpos($ns_ln, "namespace");
                    if ($ns_pos !== false) {
                        $ns_ln = substr($ns_ln, $ns_pos + strlen("namespace") + 1); //get just namespace
                        $ns_ln = substr($ns_ln, 0, strpos($ns_ln, ";"));
                        if ($ns_ln && strlen($ns_ln)) {
                            $namespace = $ns_ln;
                        }
                    }
                    Utils::log("Updating only the table " . $u_table, "WARN");
                } else {
                    Utils::log("Table " . $u_table . " not found.", false);
                }
            }
            foreach ($tables as $table) {
                $model_name = "";
                $ok = Utils::create_model($table, $dbname, $namespace, $avoided_suffixes, $model_name, $fixer, $keep_suffix);
                Utils::log("Model {$table} -> {$model_name} created", $ok);
                $models[] = $model_name;
            }
            Utils::log("Model generation of this database finished!", "bold");
        }

        $benchmark_end = (float) number_format(microtime(true) - $benchmark_start, 2);
        Utils::log("Model generator finished. Took: " . $benchmark_end . "s.", "bg_magenta");

    }
}